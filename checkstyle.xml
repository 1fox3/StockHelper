<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd">
<module name="Checker">
    <property name="charset" value="UTF-8" />
    <property name="severity" value="error" />

    <!-- Checks for Size Violations.  -->
    <!-- 检查文件的长度（行） default max=2500 -->
    <module name="FileLength">
        <property name="max" value="3000" />
        <property name="severity" value="warning" />
    </module>

    <!-- 检查源码中没有制表符（'\t'） -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true" />
    </module>

    <module name="TreeWalker">
        <module name="SuppressWarningsHolder" />
        <!--空格检测-->
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true" />
            <property name="allowEmptyMethods" value="true" />
            <property name="allowEmptyTypes" value="true" />
            <property name="allowEmptyLoops" value="true" />
            <message key="ws.notFollowed"
                value="WhitespaceAround: ''{0}'' is not followed by whitespace." />
            <message key="ws.notPreceded"
                value="WhitespaceAround: ''{0}'' is not preceded with whitespace." />
        </module>

        <module name="GenericWhitespace">
            <message key="ws.followed"
                value="GenericWhitespace ''{0}'' is followed by whitespace." />
            <message key="ws.preceded"
                value="GenericWhitespace ''{0}'' is preceded with whitespace." />
            <message key="ws.illegalFollow"
                value="GenericWhitespace ''{0}'' should followed by whitespace." />
            <message key="ws.notPreceded"
                value="GenericWhitespace ''{0}'' is not preceded with whitespace." />
        </module>

        <!-- Checks for imports    -->
        <!-- 必须导入类的完整路径，即不能使用*导入所需的类 -->
        <module name="AvoidStarImport" />

        <!-- 检查是否从非法的包中导入了类 illegalPkgs: 定义非法的包名称-->
        <module name="IllegalImport" /> <!-- defaults to sun.* packages -->

        <!-- 检查是否导入了不必显示导入的类-->
        <module name="RedundantImport" />

        <!-- 检查是否导入的包没有使用-->
        <module name="UnusedImports" />

        <!-- 检查代码块的左花括号的放置位置 -->
        <module name="LeftCurly">
            <property name="option" value="eol" />
        </module>

        <!--检查代码块周围是否有大括号，可以检查do、else、if、for、while等关键字所控制的代码块-->
        <module name="NeedBraces">
            <property name="tokens"
                value="LITERAL_DO, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE" /> <!-- LITERAL_IF 不检测-->
            <property name="allowSingleLineStatement" value="true" />
        </module>

        <!--检查else、try、catch标记的代码块的右花括号的放置位置-->
        <module name="RightCurly">
            <property name="id" value="RightCurlySame" />
            <property name="tokens"
                value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO" />
        </module>

        <module name="RightCurly">
            <property name="id" value="RightCurlyAlone" />
            <property name="option" value="alone" />
            <property name="tokens"
                value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT" />
        </module>

        <!-- 检查在重写了equals方法后是否重写了hashCode方法 -->
        <module name="EqualsHashCode" />

        <!--检查是否有不合法的实例化操作，是否使用工厂方法更好-->
        <module name="IllegalInstantiation">
            <property name="classes" value="java.lang.Boolean" />
        </module>

        <!--检查Java代码的缩进是否正确-->
        <module name="Indentation">
            <property name="arrayInitIndent" value="8" />
        </module>

        <module name="SimplifyBooleanExpression" />

        <module name="SimplifyBooleanReturn" />

        <!--检查每个变量是否使用一行一条语句进行声明-->
        <!--<module name="MultipleVariableDeclarations" />-->

        <!--检查数组定义的风格，默认java风格-->
        <module name="ArrayTypeStyle" />

        <!--检查long类型的常量在定义时是否由大写的“L”开头-->
        <module name="UpperEll" />

        <!--检查switch中case后是否加入了跳出语句，例如：return、break、throw、continue -->
        <module name="FallThrough" />

        <!-- Checks the number of parameters of a method or constructor. max default 7个. -->
        <module name="ParameterNumber">
            <property name="max" value="19" />
        </module>

        <!-- 每行字符数 -->
        <module name="LineLength">
            <property name="max" value="250" />
        </module>

        <!-- Checks for long methods and constructors. max default 150行. max=300 设置长度300 -->
        <module name="MethodLength">
            <property name="max" value="200" />
        </module>

        <!-- ModifierOrder 检查修饰符的顺序，默认是 public,protected,private,abstract,static,final,transient,volatile,synchronized,native -->
        <module name="ModifierOrder" />

        <!-- 检查是否有多余的修饰符，例如：接口中的方法不必使用public、abstract修饰  -->
        <!--<module name="RedundantModifier">-->
        <!--</module>-->

        <!--- 字符串比较必须使用 equals() -->
        <module name="StringLiteralEquality" />

        <!--限制try代码块的嵌套层数（默认值为1）-->
        <module name="NestedTryDepth">
            <property name="max" value="2" />
        </module>

        <!-- 返回个数 -->
        <module name="ReturnCount">
            <property name="max" value="15" />
            <property name="maxForVoid" value="15" />
            <property name="format" value="^$" />
        </module>

    </module>

</module>